{"id":"../node_modules/@antv/l7-core/es/services/renderer/IMultiPassRenderer.js","dependencies":[{"name":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\@antv\\l7-core\\es\\services\\renderer\\IMultiPassRenderer.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\package.json","includedInParent":true,"mtime":1638980225037},{"name":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\@antv\\l7-core\\package.json","includedInParent":true,"mtime":1638979319341}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PassType = void 0;\nvar PassType;\nexports.PassType = PassType;\n\n(function (PassType) {\n  PassType[\"Normal\"] = \"normal\";\n  PassType[\"PostProcessing\"] = \"post-processing\";\n})(PassType || (exports.PassType = PassType = {}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":7,"column":4}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":7,"column":12}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":10,"column":11}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":11,"column":0}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":11,"column":2}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":11,"column":20}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":11,"column":31}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":12,"column":0}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":12,"column":2}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":12,"column":28}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":12,"column":48}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":13,"column":3}},{"source":"../../../src/services/renderer/IMultiPassRenderer.ts","name":"PassType","original":{"line":4,"column":12},"generated":{"line":13,"column":35}}],"sources":{"../../../src/services/renderer/IMultiPassRenderer.ts":"import { ILayer } from '../layer/ILayerService';\nimport { IFramebuffer } from './IFramebuffer';\n\nexport enum PassType {\n  Normal = 'normal',\n  PostProcessing = 'post-processing',\n}\n\n/**\n * Pass 分两类：\n * 1. 渲染相关 eg. ClearPass、RenderPass、PickingPass、ShadowPass\n * 2. PostProcessing eg. CopyPass、BlurPass\n * 另外考虑到 Pass 之间严格的执行顺序，render 方法必须是异步的\n */\nexport interface IPass<InitializationOptions> {\n  getName(): string;\n  getType(): PassType;\n  init(layer: ILayer, config?: Partial<InitializationOptions>): void;\n  render(layer: ILayer): void;\n}\n\n/**\n * PostProcessing，自动切换 renderTarget\n * 例如最后一个 PostProcessingPass 自动切换 renderTarget 为屏幕\n */\nexport interface IPostProcessingPass<InitializationOptions>\n  extends IPass<InitializationOptions> {\n  setRenderToScreen(renderToScreen: boolean): void;\n  setName(name: string): void;\n  isEnabled(): boolean;\n  setEnabled(enabled: boolean): void;\n  updateOptions(config: Partial<InitializationOptions>): void;\n}\n\nexport interface IPostProcessor {\n  getReadFBO(): IFramebuffer;\n  getWriteFBO(): IFramebuffer;\n  resize(viewportWidth: number, viewportHeight: number): void;\n  add<InitializationOptions>(\n    pass: IPostProcessingPass<InitializationOptions>,\n    layer: ILayer,\n    config?: Partial<InitializationOptions>,\n  ): void;\n  render(layer: ILayer): Promise<unknown>;\n  getPostProcessingPassByName(\n    name: string,\n  ): IPostProcessingPass<unknown> | undefined;\n}\n\nexport interface IMultiPassRenderer {\n  getPostProcessor(): IPostProcessor;\n  resize(viewportWidth: number, viewportHeight: number): void;\n  add<InitializationOptions>(\n    pass: IPass<InitializationOptions>,\n    config?: Partial<InitializationOptions>,\n  ): void;\n  render(): void;\n  getRenderFlag(): boolean;\n  setRenderFlag(enabled: boolean): void;\n  setLayer(layer: ILayer): void;\n  destroy(): void;\n}\n"},"lineCount":null}},"error":null,"hash":"e42c4abc78ba9602eb56686421954b32","cacheData":{"env":{}}}