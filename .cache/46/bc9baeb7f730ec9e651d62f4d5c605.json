{"id":"../node_modules/@antv/util/esm/is-equal-with.js","dependencies":[{"name":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\@antv\\util\\esm\\is-equal-with.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\@antv\\util\\src\\is-equal-with.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\package.json","includedInParent":true,"mtime":1638980225037},{"name":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\@antv\\util\\package.json","includedInParent":true,"mtime":1638979319359},{"name":"./is-function","loc":{"line":1,"column":23},"parent":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\@antv\\util\\esm\\is-equal-with.js","resolved":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\@antv\\util\\esm\\is-function.js"},{"name":"./is-equal","loc":{"line":2,"column":20},"parent":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\@antv\\util\\esm\\is-equal-with.js","resolved":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\@antv\\util\\esm\\is-equal.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _isFunction = _interopRequireDefault(require(\"./is-function\"));\n\nvar _isEqual = _interopRequireDefault(require(\"./is-equal\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [fn] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * isEqualWith(array, other, customizer);  // => true\n */\nvar _default = function _default(value, other, fn) {\n  if (!(0, _isFunction.default)(fn)) {\n    return (0, _isEqual.default)(value, other);\n  }\n\n  return !!fn(value, other);\n};\n\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/is-equal-with.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":10,"column":0}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":14,"column":0}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":26,"column":15},"generated":{"line":36,"column":15}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":26,"column":19},"generated":{"line":36,"column":33}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":26,"column":15},"generated":{"line":36,"column":38}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":26,"column":29},"generated":{"line":36,"column":40}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":26,"column":15},"generated":{"line":36,"column":45}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":26,"column":39},"generated":{"line":36,"column":47}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":26,"column":15},"generated":{"line":36,"column":49}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":26,"column":68},"generated":{"line":36,"column":51}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":37,"column":0}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":27,"column":6},"generated":{"line":37,"column":6}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":27,"column":7},"generated":{"line":37,"column":7}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":27,"column":18},"generated":{"line":37,"column":32}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":27,"column":7},"generated":{"line":37,"column":34}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":27,"column":2},"generated":{"line":37,"column":35}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":27,"column":23},"generated":{"line":37,"column":37}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":28,"column":4},"generated":{"line":38,"column":0}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":38,"column":11}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":28,"column":19},"generated":{"line":38,"column":33}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":38,"column":38}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":28,"column":26},"generated":{"line":38,"column":40}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":28,"column":11},"generated":{"line":38,"column":45}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":28,"column":4},"generated":{"line":38,"column":46}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":29,"column":3},"generated":{"line":39,"column":0}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":41,"column":0}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":9},"generated":{"line":41,"column":9}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":10},"generated":{"line":41,"column":10}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":11},"generated":{"line":41,"column":11}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":13},"generated":{"line":41,"column":13}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":14},"generated":{"line":41,"column":14}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":13},"generated":{"line":41,"column":19}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":21},"generated":{"line":41,"column":21}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":13},"generated":{"line":41,"column":26}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":30,"column":2},"generated":{"line":41,"column":27}},{"source":"../src/is-equal-with.ts","name":null,"original":{"line":31,"column":1},"generated":{"line":42,"column":0}}],"sources":{"../src/is-equal-with.ts":"import isFunction from './is-function';\nimport isEqual from './is-equal';\n/**\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [fn] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * isEqualWith(array, other, customizer);  // => true\n */\n\nexport default <T>(value: T, other: T, fn: (v1: T, v2: T) => boolean): boolean => {\n  if (!isFunction(fn)) {\n    return isEqual(value, other);\n  }\n  return !!fn(value, other);\n};\n"},"lineCount":null}},"error":null,"hash":"dd70a490fee6d2fc98a6a3385878b9a4","cacheData":{"env":{}}}