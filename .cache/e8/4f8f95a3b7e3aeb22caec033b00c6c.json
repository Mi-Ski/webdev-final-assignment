{"id":"../node_modules/supercluster/dist/supercluster.js","dependencies":[{"name":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\package.json","includedInParent":true,"mtime":1638980225037},{"name":"C:\\Users\\skiba\\Desktop\\webdev-final-assignment\\node_modules\\supercluster\\package.json","includedInParent":true,"mtime":1638979319357}],"generated":{"js":"var define;\nvar global = arguments[3];\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\ntypeof define === 'function' && define.amd ? define(factory) :\n(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Supercluster = factory());\n})(this, (function () { 'use strict';\n\nfunction sortKD(ids, coords, nodeSize, left, right, depth) {\n    if (right - left <= nodeSize) { return; }\n\n    var m = (left + right) >> 1;\n\n    select(ids, coords, m, left, right, depth % 2);\n\n    sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);\n    sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\n\nfunction select(ids, coords, k, left, right, inc) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            select(ids, coords, k, newLeft, newRight, inc);\n        }\n\n        var t = coords[2 * k + inc];\n        var i = left;\n        var j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + inc] > t) { swapItem(ids, coords, left, right); }\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + inc] < t) { i++; }\n            while (coords[2 * j + inc] > t) { j--; }\n        }\n\n        if (coords[2 * left + inc] === t) { swapItem(ids, coords, left, j); }\n        else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) { left = j + 1; }\n        if (k <= j) { right = j - 1; }\n    }\n}\n\nfunction swapItem(ids, coords, i, j) {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction range(ids, coords, minX, minY, maxX, maxY, nodeSize) {\n    var stack = [0, ids.length - 1, 0];\n    var result = [];\n    var x, y;\n\n    while (stack.length) {\n        var axis = stack.pop();\n        var right = stack.pop();\n        var left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (var i = left; i <= right; i++) {\n                x = coords[2 * i];\n                y = coords[2 * i + 1];\n                if (x >= minX && x <= maxX && y >= minY && y <= maxY) { result.push(ids[i]); }\n            }\n            continue;\n        }\n\n        var m = Math.floor((left + right) / 2);\n\n        x = coords[2 * m];\n        y = coords[2 * m + 1];\n\n        if (x >= minX && x <= maxX && y >= minY && y <= maxY) { result.push(ids[m]); }\n\n        var nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? minX <= x : minY <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? maxX >= x : maxY >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction within(ids, coords, qx, qy, r, nodeSize) {\n    var stack = [0, ids.length - 1, 0];\n    var result = [];\n    var r2 = r * r;\n\n    while (stack.length) {\n        var axis = stack.pop();\n        var right = stack.pop();\n        var left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (var i = left; i <= right; i++) {\n                if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) { result.push(ids[i]); }\n            }\n            continue;\n        }\n\n        var m = Math.floor((left + right) / 2);\n\n        var x = coords[2 * m];\n        var y = coords[2 * m + 1];\n\n        if (sqDist(x, y, qx, qy) <= r2) { result.push(ids[m]); }\n\n        var nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? qx - r <= x : qy - r <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? qx + r >= x : qy + r >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction sqDist(ax, ay, bx, by) {\n    var dx = ax - bx;\n    var dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nvar defaultGetX = function (p) { return p[0]; };\nvar defaultGetY = function (p) { return p[1]; };\n\nvar KDBush = function KDBush(points, getX, getY, nodeSize, ArrayType) {\n    if ( getX === void 0 ) getX = defaultGetX;\n    if ( getY === void 0 ) getY = defaultGetY;\n    if ( nodeSize === void 0 ) nodeSize = 64;\n    if ( ArrayType === void 0 ) ArrayType = Float64Array;\n\n    this.nodeSize = nodeSize;\n    this.points = points;\n\n    var IndexArrayType = points.length < 65536 ? Uint16Array : Uint32Array;\n\n    var ids = this.ids = new IndexArrayType(points.length);\n    var coords = this.coords = new ArrayType(points.length * 2);\n\n    for (var i = 0; i < points.length; i++) {\n        ids[i] = i;\n        coords[2 * i] = getX(points[i]);\n        coords[2 * i + 1] = getY(points[i]);\n    }\n\n    sortKD(ids, coords, nodeSize, 0, ids.length - 1, 0);\n};\n\nKDBush.prototype.range = function range$1 (minX, minY, maxX, maxY) {\n    return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);\n};\n\nKDBush.prototype.within = function within$1 (x, y, r) {\n    return within(this.ids, this.coords, x, y, r, this.nodeSize);\n};\n\nvar defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: function (props) { return props; } // props => ({sum: props.my_value})\n};\n\nvar fround = Math.fround || (function (tmp) { return (function (x) { tmp[0] = +x; return tmp[0]; }); })(new Float32Array(1));\n\nvar Supercluster = function Supercluster(options) {\n    this.options = extend(Object.create(defaultOptions), options);\n    this.trees = new Array(this.options.maxZoom + 1);\n};\n\nSupercluster.prototype.load = function load (points) {\n    var ref = this.options;\n        var log = ref.log;\n        var minZoom = ref.minZoom;\n        var maxZoom = ref.maxZoom;\n        var nodeSize = ref.nodeSize;\n\n    if (log) { console.time('total time'); }\n\n    var timerId = \"prepare \" + (points.length) + \" points\";\n    if (log) { console.time(timerId); }\n\n    this.points = points;\n\n    // generate a cluster object for each point and index input points into a KD-tree\n    var clusters = [];\n    for (var i = 0; i < points.length; i++) {\n        if (!points[i].geometry) { continue; }\n        clusters.push(createPointCluster(points[i], i));\n    }\n    this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n    if (log) { console.timeEnd(timerId); }\n\n    // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n    // results in a cluster hierarchy across zoom levels\n    for (var z = maxZoom; z >= minZoom; z--) {\n        var now = +Date.now();\n\n        // create a new set of clusters for the zoom and index them with a KD-tree\n        clusters = this._cluster(clusters, z);\n        this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) { console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now); }\n    }\n\n    if (log) { console.timeEnd('total time'); }\n\n    return this;\n};\n\nSupercluster.prototype.getClusters = function getClusters (bbox, zoom) {\n    var minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n    var minLat = Math.max(-90, Math.min(90, bbox[1]));\n    var maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n    var maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n    if (bbox[2] - bbox[0] >= 360) {\n        minLng = -180;\n        maxLng = 180;\n    } else if (minLng > maxLng) {\n        var easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n        var westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n        return easternHem.concat(westernHem);\n    }\n\n    var tree = this.trees[this._limitZoom(zoom)];\n    var ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n    var clusters = [];\n    for (var i = 0, list = ids; i < list.length; i += 1) {\n        var id = list[i];\n\n            var c = tree.points[id];\n        clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n    }\n    return clusters;\n};\n\nSupercluster.prototype.getChildren = function getChildren (clusterId) {\n    var originId = this._getOriginId(clusterId);\n    var originZoom = this._getOriginZoom(clusterId);\n    var errorMsg = 'No cluster with the specified id.';\n\n    var index = this.trees[originZoom];\n    if (!index) { throw new Error(errorMsg); }\n\n    var origin = index.points[originId];\n    if (!origin) { throw new Error(errorMsg); }\n\n    var r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n    var ids = index.within(origin.x, origin.y, r);\n    var children = [];\n    for (var i = 0, list = ids; i < list.length; i += 1) {\n        var id = list[i];\n\n            var c = index.points[id];\n        if (c.parentId === clusterId) {\n            children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n    }\n\n    if (children.length === 0) { throw new Error(errorMsg); }\n\n    return children;\n};\n\nSupercluster.prototype.getLeaves = function getLeaves (clusterId, limit, offset) {\n    limit = limit || 10;\n    offset = offset || 0;\n\n    var leaves = [];\n    this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n    return leaves;\n};\n\nSupercluster.prototype.getTile = function getTile (z, x, y) {\n    var tree = this.trees[this._limitZoom(z)];\n    var z2 = Math.pow(2, z);\n    var ref = this.options;\n        var extent = ref.extent;\n        var radius = ref.radius;\n    var p = radius / extent;\n    var top = (y - p) / z2;\n    var bottom = (y + 1 + p) / z2;\n\n    var tile = {\n        features: []\n    };\n\n    this._addTileFeatures(\n        tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n        tree.points, x, y, z2, tile);\n\n    if (x === 0) {\n        this._addTileFeatures(\n            tree.range(1 - p / z2, top, 1, bottom),\n            tree.points, z2, y, z2, tile);\n    }\n    if (x === z2 - 1) {\n        this._addTileFeatures(\n            tree.range(0, top, p / z2, bottom),\n            tree.points, -1, y, z2, tile);\n    }\n\n    return tile.features.length ? tile : null;\n};\n\nSupercluster.prototype.getClusterExpansionZoom = function getClusterExpansionZoom (clusterId) {\n    var expansionZoom = this._getOriginZoom(clusterId) - 1;\n    while (expansionZoom <= this.options.maxZoom) {\n        var children = this.getChildren(clusterId);\n        expansionZoom++;\n        if (children.length !== 1) { break; }\n        clusterId = children[0].properties.cluster_id;\n    }\n    return expansionZoom;\n};\n\nSupercluster.prototype._appendLeaves = function _appendLeaves (result, clusterId, limit, offset, skipped) {\n    var children = this.getChildren(clusterId);\n\n    for (var i = 0, list = children; i < list.length; i += 1) {\n        var child = list[i];\n\n            var props = child.properties;\n\n        if (props && props.cluster) {\n            if (skipped + props.point_count <= offset) {\n                // skip the whole cluster\n                skipped += props.point_count;\n            } else {\n                // enter the cluster\n                skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                // exit the cluster\n            }\n        } else if (skipped < offset) {\n            // skip a single point\n            skipped++;\n        } else {\n            // add a single point\n            result.push(child);\n        }\n        if (result.length === limit) { break; }\n    }\n\n    return skipped;\n};\n\nSupercluster.prototype._addTileFeatures = function _addTileFeatures (ids, points, x, y, z2, tile) {\n    for (var i$1 = 0, list = ids; i$1 < list.length; i$1 += 1) {\n        var i = list[i$1];\n\n            var c = points[i];\n        var isCluster = c.numPoints;\n\n        var tags = (void 0), px = (void 0), py = (void 0);\n        if (isCluster) {\n            tags = getClusterProperties(c);\n            px = c.x;\n            py = c.y;\n        } else {\n            var p = this.points[c.index];\n            tags = p.properties;\n            px = lngX(p.geometry.coordinates[0]);\n            py = latY(p.geometry.coordinates[1]);\n        }\n\n        var f = {\n            type: 1,\n            geometry: [[\n                Math.round(this.options.extent * (px * z2 - x)),\n                Math.round(this.options.extent * (py * z2 - y))\n            ]],\n            tags: tags\n        };\n\n        // assign id\n        var id = (void 0);\n        if (isCluster) {\n            id = c.id;\n        } else if (this.options.generateId) {\n            // optionally generate id\n            id = c.index;\n        } else if (this.points[c.index].id) {\n            // keep id if already assigned\n            id = this.points[c.index].id;\n        }\n\n        if (id !== undefined) { f.id = id; }\n\n        tile.features.push(f);\n    }\n};\n\nSupercluster.prototype._limitZoom = function _limitZoom (z) {\n    return Math.max(this.options.minZoom, Math.min(+z, this.options.maxZoom + 1));\n};\n\nSupercluster.prototype._cluster = function _cluster (points, zoom) {\n    var clusters = [];\n    var ref = this.options;\n        var radius = ref.radius;\n        var extent = ref.extent;\n        var reduce = ref.reduce;\n        var minPoints = ref.minPoints;\n    var r = radius / (extent * Math.pow(2, zoom));\n\n    // loop through each point\n    for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        // if we've already visited the point at this zoom level, skip it\n        if (p.zoom <= zoom) { continue; }\n        p.zoom = zoom;\n\n        // find all nearby points\n        var tree = this.trees[zoom + 1];\n        var neighborIds = tree.within(p.x, p.y, r);\n\n        var numPointsOrigin = p.numPoints || 1;\n        var numPoints = numPointsOrigin;\n\n        // count the number of points in a potential cluster\n        for (var i$1 = 0, list = neighborIds; i$1 < list.length; i$1 += 1) {\n            var neighborId = list[i$1];\n\n                var b = tree.points[neighborId];\n            // filter out neighbors that are already processed\n            if (b.zoom > zoom) { numPoints += b.numPoints || 1; }\n        }\n\n        // if there were neighbors to merge, and there are enough points to form a cluster\n        if (numPoints > numPointsOrigin && numPoints >= minPoints) {\n            var wx = p.x * numPointsOrigin;\n            var wy = p.y * numPointsOrigin;\n\n            var clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n            // encode both zoom and point index on which the cluster originated -- offset by total length of features\n            var id = (i << 5) + (zoom + 1) + this.points.length;\n\n            for (var i$2 = 0, list$1 = neighborIds; i$2 < list$1.length; i$2 += 1) {\n                var neighborId$1 = list$1[i$2];\n\n                    var b$1 = tree.points[neighborId$1];\n\n                if (b$1.zoom <= zoom) { continue; }\n                b$1.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                var numPoints2 = b$1.numPoints || 1;\n                wx += b$1.x * numPoints2; // accumulate coordinates for calculating weighted center\n                wy += b$1.y * numPoints2;\n\n                b$1.parentId = id;\n\n                if (reduce) {\n                    if (!clusterProperties) { clusterProperties = this._map(p, true); }\n                    reduce(clusterProperties, this._map(b$1));\n                }\n            }\n\n            p.parentId = id;\n            clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n\n        } else { // left points as unclustered\n            clusters.push(p);\n\n            if (numPoints > 1) {\n                for (var i$3 = 0, list$2 = neighborIds; i$3 < list$2.length; i$3 += 1) {\n                    var neighborId$2 = list$2[i$3];\n\n                        var b$2 = tree.points[neighborId$2];\n                    if (b$2.zoom <= zoom) { continue; }\n                    b$2.zoom = zoom;\n                    clusters.push(b$2);\n                }\n            }\n        }\n    }\n\n    return clusters;\n};\n\n// get index of the point from which the cluster originated\nSupercluster.prototype._getOriginId = function _getOriginId (clusterId) {\n    return (clusterId - this.points.length) >> 5;\n};\n\n// get zoom of the point from which the cluster originated\nSupercluster.prototype._getOriginZoom = function _getOriginZoom (clusterId) {\n    return (clusterId - this.points.length) % 32;\n};\n\nSupercluster.prototype._map = function _map (point, clone) {\n    if (point.numPoints) {\n        return clone ? extend({}, point.properties) : point.properties;\n    }\n    var original = this.points[point.index].properties;\n    var result = this.options.map(original);\n    return clone && result === original ? extend({}, result) : result;\n};\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: fround(x), // weighted cluster center; round for consistency with Float32Array index\n        y: fround(y),\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id: id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints: numPoints,\n        properties: properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    var ref = p.geometry.coordinates;\n    var x = ref[0];\n    var y = ref[1];\n    return {\n        x: fround(lngX(x)), // projected point coordinates\n        y: fround(latY(y)),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    var count = cluster.numPoints;\n    var abbrev =\n        count >= 10000 ? ((Math.round(count / 1000)) + \"k\") :\n        count >= 1000 ? ((Math.round(count / 100) / 10) + \"k\") : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    var sin = Math.sin(lat * Math.PI / 180);\n    var y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    var y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (var id in src) { dest[id] = src[id]; }\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n\nreturn Supercluster;\n\n}));\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":1,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":2,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":3,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":4,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":5,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":6,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":7,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":8,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":9,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":10,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":11,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":12,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":13,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":14,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":15,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":16,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":17,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":18,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":19,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":20,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":21,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":22,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":23,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":24,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":25,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":26,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":27,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":28,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":29,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":30,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":31,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":32,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":33,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":34,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":35,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":36,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":37,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":38,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":39,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":40,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":41,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":42,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":43,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":45,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":46,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":47,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":48,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":49,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":50,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":51,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":52,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":53,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":54,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":55,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":56,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":57,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":58,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":59,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":60,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":61,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":62,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":63,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":64,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":65,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":66,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":67,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":68,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":69,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":70,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":71,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":72,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":73,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":74,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":75,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":76,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":77,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":78,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":79,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":80,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":81,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":82,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":83,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":84,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":85,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":86,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":87,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":88,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":89,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":90,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":91,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":92,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":93,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":94,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":95,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":96,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":97,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":98,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":99,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":100,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":101,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":102,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":103,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":104,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":105,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":106,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":107,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":108,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":109,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":110,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":111,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":112,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":113,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":114,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":115,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":116,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":117,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":118,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":119,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":120,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":121,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":122,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":123,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":124,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":125,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":126,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":127,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":128,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":129,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":130,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":131,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":132,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":133,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":134,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":135,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":136,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":137,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":138,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":139,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":140,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":141,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":142,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":143,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":144,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":145,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":146,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":147,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":148,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":149,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":150,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":151,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":152,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":153,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":154,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":155,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":156,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":157,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":158,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":159,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":160,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":161,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":162,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":163,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":164,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":165,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":166,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":167,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":168,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":169,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":170,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":171,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":172,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":173,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":174,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":175,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":176,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":177,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":178,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":179,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":180,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":181,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":182,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":183,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":184,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":185,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":186,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":187,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":188,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":189,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":190,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":191,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":192,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":193,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":194,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":195,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":196,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":197,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":198,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":199,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":200,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":201,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":202,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":203,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":204,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":205,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":206,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":207,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":208,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":209,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":210,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":211,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":212,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":213,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":214,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":215,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":216,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":217,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":218,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":219,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":220,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":221,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":222,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":223,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":224,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":225,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":226,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":227,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":228,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":229,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":230,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":231,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":232,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":233,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":234,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":235,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":236,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":237,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":238,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":239,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":240,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":241,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":242,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":243,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":244,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":245,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":246,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":247,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":248,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":249,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":250,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":251,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":252,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":253,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":254,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":255,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":256,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":257,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":258,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":259,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":260,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":261,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":262,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":263,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":264,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":265,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":266,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":267,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":268,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":269,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":270,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":271,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":272,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":273,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":274,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":275,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":276,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":277,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":278,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":279,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":280,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":281,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":282,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":283,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":284,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":285,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":286,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":287,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":288,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":289,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":290,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":291,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":292,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":293,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":294,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":295,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":296,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":297,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":298,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":299,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":300,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":301,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":302,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":303,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":304,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":305,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":306,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":307,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":308,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":309,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":310,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":311,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":312,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":313,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":314,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":315,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":316,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":317,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":318,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":319,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":320,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":321,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":322,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":323,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":324,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":325,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":326,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":327,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":328,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":329,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":330,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":331,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":332,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":333,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":334,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":335,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":336,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":337,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":338,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":339,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":340,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":341,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":342,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":343,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":344,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":345,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":346,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":347,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":348,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":349,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":350,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":351,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":352,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":353,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":354,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":355,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":356,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":357,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":358,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":359,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":360,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":361,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":362,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":363,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":364,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":365,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":366,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":367,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":368,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":369,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":370,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":371,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":372,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":373,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":374,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":375,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":376,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":377,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":378,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":379,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":380,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":381,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":382,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":383,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":384,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":385,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":386,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":387,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":388,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":389,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":390,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":391,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":392,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":393,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":394,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":395,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":396,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":397,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":398,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":399,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":400,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":401,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":402,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":403,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":404,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":405,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":406,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":407,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":408,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":409,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":410,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":411,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":412,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":413,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":414,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":415,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":416,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":417,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":418,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":419,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":420,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":421,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":422,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":423,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":424,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":425,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":426,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":427,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":428,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":429,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":430,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":431,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":432,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":433,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":434,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":435,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":436,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":437,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":438,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":439,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":440,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":441,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":442,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":443,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":444,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":445,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":446,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":447,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":448,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":449,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":450,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":451,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":452,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":453,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":454,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":455,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":456,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":457,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":458,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":459,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":460,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":461,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":462,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":463,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":464,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":465,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":466,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":467,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":468,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":469,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":470,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":471,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":472,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":473,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":474,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":475,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":476,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":477,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":478,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":479,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":480,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":481,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":482,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":483,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":484,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":485,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":486,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":487,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":488,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":489,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":490,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":491,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":492,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":493,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":494,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":495,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":496,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":497,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":498,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":499,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":500,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":501,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":502,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":503,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":504,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":505,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":506,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":507,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":508,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":509,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":510,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":511,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":512,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":513,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":514,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":515,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":516,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":517,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":518,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":519,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":520,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":521,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":522,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":523,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":524,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":525,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":526,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":527,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":528,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":529,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":530,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":531,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":532,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":533,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":534,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":535,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":536,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":537,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":538,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":539,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":540,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":541,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":542,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":543,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":544,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":545,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":546,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":547,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":548,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":549,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":550,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":551,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":552,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":553,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":554,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":555,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":556,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":557,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":558,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":559,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":560,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":561,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":562,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":563,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":564,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":565,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":566,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":567,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":568,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":569,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":570,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":571,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":572,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":573,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":574,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":575,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":576,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":577,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":578,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":579,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":580,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":581,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":582,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":583,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":584,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":585,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":586,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":587,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":588,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":589,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":590,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":591,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":592,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":593,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":594,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":595,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":596,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":597,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":598,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":599,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":600,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":601,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":602,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":603,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":604,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":605,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":606,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":607,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":608,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":609,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":610,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":611,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":612,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":613,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":614,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":615,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":616,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":617,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":618,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":619,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":620,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":621,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":622,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":623,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":624,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":625,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":626,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":627,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":628,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":629,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":630,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":631,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":632,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":633,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":634,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":635,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/supercluster/dist/supercluster.js","original":{"line":636,"column":0},"generated":{"line":638,"column":0}}],"sources":{"../node_modules/supercluster/dist/supercluster.js":"(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\ntypeof define === 'function' && define.amd ? define(factory) :\n(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Supercluster = factory());\n})(this, (function () { 'use strict';\n\nfunction sortKD(ids, coords, nodeSize, left, right, depth) {\n    if (right - left <= nodeSize) { return; }\n\n    var m = (left + right) >> 1;\n\n    select(ids, coords, m, left, right, depth % 2);\n\n    sortKD(ids, coords, nodeSize, left, m - 1, depth + 1);\n    sortKD(ids, coords, nodeSize, m + 1, right, depth + 1);\n}\n\nfunction select(ids, coords, k, left, right, inc) {\n\n    while (right > left) {\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            select(ids, coords, k, newLeft, newRight, inc);\n        }\n\n        var t = coords[2 * k + inc];\n        var i = left;\n        var j = right;\n\n        swapItem(ids, coords, left, k);\n        if (coords[2 * right + inc] > t) { swapItem(ids, coords, left, right); }\n\n        while (i < j) {\n            swapItem(ids, coords, i, j);\n            i++;\n            j--;\n            while (coords[2 * i + inc] < t) { i++; }\n            while (coords[2 * j + inc] > t) { j--; }\n        }\n\n        if (coords[2 * left + inc] === t) { swapItem(ids, coords, left, j); }\n        else {\n            j++;\n            swapItem(ids, coords, j, right);\n        }\n\n        if (j <= k) { left = j + 1; }\n        if (k <= j) { right = j - 1; }\n    }\n}\n\nfunction swapItem(ids, coords, i, j) {\n    swap(ids, i, j);\n    swap(coords, 2 * i, 2 * j);\n    swap(coords, 2 * i + 1, 2 * j + 1);\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction range(ids, coords, minX, minY, maxX, maxY, nodeSize) {\n    var stack = [0, ids.length - 1, 0];\n    var result = [];\n    var x, y;\n\n    while (stack.length) {\n        var axis = stack.pop();\n        var right = stack.pop();\n        var left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (var i = left; i <= right; i++) {\n                x = coords[2 * i];\n                y = coords[2 * i + 1];\n                if (x >= minX && x <= maxX && y >= minY && y <= maxY) { result.push(ids[i]); }\n            }\n            continue;\n        }\n\n        var m = Math.floor((left + right) / 2);\n\n        x = coords[2 * m];\n        y = coords[2 * m + 1];\n\n        if (x >= minX && x <= maxX && y >= minY && y <= maxY) { result.push(ids[m]); }\n\n        var nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? minX <= x : minY <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? maxX >= x : maxY >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction within(ids, coords, qx, qy, r, nodeSize) {\n    var stack = [0, ids.length - 1, 0];\n    var result = [];\n    var r2 = r * r;\n\n    while (stack.length) {\n        var axis = stack.pop();\n        var right = stack.pop();\n        var left = stack.pop();\n\n        if (right - left <= nodeSize) {\n            for (var i = left; i <= right; i++) {\n                if (sqDist(coords[2 * i], coords[2 * i + 1], qx, qy) <= r2) { result.push(ids[i]); }\n            }\n            continue;\n        }\n\n        var m = Math.floor((left + right) / 2);\n\n        var x = coords[2 * m];\n        var y = coords[2 * m + 1];\n\n        if (sqDist(x, y, qx, qy) <= r2) { result.push(ids[m]); }\n\n        var nextAxis = (axis + 1) % 2;\n\n        if (axis === 0 ? qx - r <= x : qy - r <= y) {\n            stack.push(left);\n            stack.push(m - 1);\n            stack.push(nextAxis);\n        }\n        if (axis === 0 ? qx + r >= x : qy + r >= y) {\n            stack.push(m + 1);\n            stack.push(right);\n            stack.push(nextAxis);\n        }\n    }\n\n    return result;\n}\n\nfunction sqDist(ax, ay, bx, by) {\n    var dx = ax - bx;\n    var dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nvar defaultGetX = function (p) { return p[0]; };\nvar defaultGetY = function (p) { return p[1]; };\n\nvar KDBush = function KDBush(points, getX, getY, nodeSize, ArrayType) {\n    if ( getX === void 0 ) getX = defaultGetX;\n    if ( getY === void 0 ) getY = defaultGetY;\n    if ( nodeSize === void 0 ) nodeSize = 64;\n    if ( ArrayType === void 0 ) ArrayType = Float64Array;\n\n    this.nodeSize = nodeSize;\n    this.points = points;\n\n    var IndexArrayType = points.length < 65536 ? Uint16Array : Uint32Array;\n\n    var ids = this.ids = new IndexArrayType(points.length);\n    var coords = this.coords = new ArrayType(points.length * 2);\n\n    for (var i = 0; i < points.length; i++) {\n        ids[i] = i;\n        coords[2 * i] = getX(points[i]);\n        coords[2 * i + 1] = getY(points[i]);\n    }\n\n    sortKD(ids, coords, nodeSize, 0, ids.length - 1, 0);\n};\n\nKDBush.prototype.range = function range$1 (minX, minY, maxX, maxY) {\n    return range(this.ids, this.coords, minX, minY, maxX, maxY, this.nodeSize);\n};\n\nKDBush.prototype.within = function within$1 (x, y, r) {\n    return within(this.ids, this.coords, x, y, r, this.nodeSize);\n};\n\nvar defaultOptions = {\n    minZoom: 0,   // min zoom to generate clusters on\n    maxZoom: 16,  // max zoom level to cluster the points on\n    minPoints: 2, // minimum points to form a cluster\n    radius: 40,   // cluster radius in pixels\n    extent: 512,  // tile extent (radius is calculated relative to it)\n    nodeSize: 64, // size of the KD-tree leaf node, affects performance\n    log: false,   // whether to log timing info\n\n    // whether to generate numeric ids for input features (in vector tiles)\n    generateId: false,\n\n    // a reduce function for calculating custom cluster properties\n    reduce: null, // (accumulated, props) => { accumulated.sum += props.sum; }\n\n    // properties to use for individual points when running the reducer\n    map: function (props) { return props; } // props => ({sum: props.my_value})\n};\n\nvar fround = Math.fround || (function (tmp) { return (function (x) { tmp[0] = +x; return tmp[0]; }); })(new Float32Array(1));\n\nvar Supercluster = function Supercluster(options) {\n    this.options = extend(Object.create(defaultOptions), options);\n    this.trees = new Array(this.options.maxZoom + 1);\n};\n\nSupercluster.prototype.load = function load (points) {\n    var ref = this.options;\n        var log = ref.log;\n        var minZoom = ref.minZoom;\n        var maxZoom = ref.maxZoom;\n        var nodeSize = ref.nodeSize;\n\n    if (log) { console.time('total time'); }\n\n    var timerId = \"prepare \" + (points.length) + \" points\";\n    if (log) { console.time(timerId); }\n\n    this.points = points;\n\n    // generate a cluster object for each point and index input points into a KD-tree\n    var clusters = [];\n    for (var i = 0; i < points.length; i++) {\n        if (!points[i].geometry) { continue; }\n        clusters.push(createPointCluster(points[i], i));\n    }\n    this.trees[maxZoom + 1] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n    if (log) { console.timeEnd(timerId); }\n\n    // cluster points on max zoom, then cluster the results on previous zoom, etc.;\n    // results in a cluster hierarchy across zoom levels\n    for (var z = maxZoom; z >= minZoom; z--) {\n        var now = +Date.now();\n\n        // create a new set of clusters for the zoom and index them with a KD-tree\n        clusters = this._cluster(clusters, z);\n        this.trees[z] = new KDBush(clusters, getX, getY, nodeSize, Float32Array);\n\n        if (log) { console.log('z%d: %d clusters in %dms', z, clusters.length, +Date.now() - now); }\n    }\n\n    if (log) { console.timeEnd('total time'); }\n\n    return this;\n};\n\nSupercluster.prototype.getClusters = function getClusters (bbox, zoom) {\n    var minLng = ((bbox[0] + 180) % 360 + 360) % 360 - 180;\n    var minLat = Math.max(-90, Math.min(90, bbox[1]));\n    var maxLng = bbox[2] === 180 ? 180 : ((bbox[2] + 180) % 360 + 360) % 360 - 180;\n    var maxLat = Math.max(-90, Math.min(90, bbox[3]));\n\n    if (bbox[2] - bbox[0] >= 360) {\n        minLng = -180;\n        maxLng = 180;\n    } else if (minLng > maxLng) {\n        var easternHem = this.getClusters([minLng, minLat, 180, maxLat], zoom);\n        var westernHem = this.getClusters([-180, minLat, maxLng, maxLat], zoom);\n        return easternHem.concat(westernHem);\n    }\n\n    var tree = this.trees[this._limitZoom(zoom)];\n    var ids = tree.range(lngX(minLng), latY(maxLat), lngX(maxLng), latY(minLat));\n    var clusters = [];\n    for (var i = 0, list = ids; i < list.length; i += 1) {\n        var id = list[i];\n\n            var c = tree.points[id];\n        clusters.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n    }\n    return clusters;\n};\n\nSupercluster.prototype.getChildren = function getChildren (clusterId) {\n    var originId = this._getOriginId(clusterId);\n    var originZoom = this._getOriginZoom(clusterId);\n    var errorMsg = 'No cluster with the specified id.';\n\n    var index = this.trees[originZoom];\n    if (!index) { throw new Error(errorMsg); }\n\n    var origin = index.points[originId];\n    if (!origin) { throw new Error(errorMsg); }\n\n    var r = this.options.radius / (this.options.extent * Math.pow(2, originZoom - 1));\n    var ids = index.within(origin.x, origin.y, r);\n    var children = [];\n    for (var i = 0, list = ids; i < list.length; i += 1) {\n        var id = list[i];\n\n            var c = index.points[id];\n        if (c.parentId === clusterId) {\n            children.push(c.numPoints ? getClusterJSON(c) : this.points[c.index]);\n        }\n    }\n\n    if (children.length === 0) { throw new Error(errorMsg); }\n\n    return children;\n};\n\nSupercluster.prototype.getLeaves = function getLeaves (clusterId, limit, offset) {\n    limit = limit || 10;\n    offset = offset || 0;\n\n    var leaves = [];\n    this._appendLeaves(leaves, clusterId, limit, offset, 0);\n\n    return leaves;\n};\n\nSupercluster.prototype.getTile = function getTile (z, x, y) {\n    var tree = this.trees[this._limitZoom(z)];\n    var z2 = Math.pow(2, z);\n    var ref = this.options;\n        var extent = ref.extent;\n        var radius = ref.radius;\n    var p = radius / extent;\n    var top = (y - p) / z2;\n    var bottom = (y + 1 + p) / z2;\n\n    var tile = {\n        features: []\n    };\n\n    this._addTileFeatures(\n        tree.range((x - p) / z2, top, (x + 1 + p) / z2, bottom),\n        tree.points, x, y, z2, tile);\n\n    if (x === 0) {\n        this._addTileFeatures(\n            tree.range(1 - p / z2, top, 1, bottom),\n            tree.points, z2, y, z2, tile);\n    }\n    if (x === z2 - 1) {\n        this._addTileFeatures(\n            tree.range(0, top, p / z2, bottom),\n            tree.points, -1, y, z2, tile);\n    }\n\n    return tile.features.length ? tile : null;\n};\n\nSupercluster.prototype.getClusterExpansionZoom = function getClusterExpansionZoom (clusterId) {\n    var expansionZoom = this._getOriginZoom(clusterId) - 1;\n    while (expansionZoom <= this.options.maxZoom) {\n        var children = this.getChildren(clusterId);\n        expansionZoom++;\n        if (children.length !== 1) { break; }\n        clusterId = children[0].properties.cluster_id;\n    }\n    return expansionZoom;\n};\n\nSupercluster.prototype._appendLeaves = function _appendLeaves (result, clusterId, limit, offset, skipped) {\n    var children = this.getChildren(clusterId);\n\n    for (var i = 0, list = children; i < list.length; i += 1) {\n        var child = list[i];\n\n            var props = child.properties;\n\n        if (props && props.cluster) {\n            if (skipped + props.point_count <= offset) {\n                // skip the whole cluster\n                skipped += props.point_count;\n            } else {\n                // enter the cluster\n                skipped = this._appendLeaves(result, props.cluster_id, limit, offset, skipped);\n                // exit the cluster\n            }\n        } else if (skipped < offset) {\n            // skip a single point\n            skipped++;\n        } else {\n            // add a single point\n            result.push(child);\n        }\n        if (result.length === limit) { break; }\n    }\n\n    return skipped;\n};\n\nSupercluster.prototype._addTileFeatures = function _addTileFeatures (ids, points, x, y, z2, tile) {\n    for (var i$1 = 0, list = ids; i$1 < list.length; i$1 += 1) {\n        var i = list[i$1];\n\n            var c = points[i];\n        var isCluster = c.numPoints;\n\n        var tags = (void 0), px = (void 0), py = (void 0);\n        if (isCluster) {\n            tags = getClusterProperties(c);\n            px = c.x;\n            py = c.y;\n        } else {\n            var p = this.points[c.index];\n            tags = p.properties;\n            px = lngX(p.geometry.coordinates[0]);\n            py = latY(p.geometry.coordinates[1]);\n        }\n\n        var f = {\n            type: 1,\n            geometry: [[\n                Math.round(this.options.extent * (px * z2 - x)),\n                Math.round(this.options.extent * (py * z2 - y))\n            ]],\n            tags: tags\n        };\n\n        // assign id\n        var id = (void 0);\n        if (isCluster) {\n            id = c.id;\n        } else if (this.options.generateId) {\n            // optionally generate id\n            id = c.index;\n        } else if (this.points[c.index].id) {\n            // keep id if already assigned\n            id = this.points[c.index].id;\n        }\n\n        if (id !== undefined) { f.id = id; }\n\n        tile.features.push(f);\n    }\n};\n\nSupercluster.prototype._limitZoom = function _limitZoom (z) {\n    return Math.max(this.options.minZoom, Math.min(+z, this.options.maxZoom + 1));\n};\n\nSupercluster.prototype._cluster = function _cluster (points, zoom) {\n    var clusters = [];\n    var ref = this.options;\n        var radius = ref.radius;\n        var extent = ref.extent;\n        var reduce = ref.reduce;\n        var minPoints = ref.minPoints;\n    var r = radius / (extent * Math.pow(2, zoom));\n\n    // loop through each point\n    for (var i = 0; i < points.length; i++) {\n        var p = points[i];\n        // if we've already visited the point at this zoom level, skip it\n        if (p.zoom <= zoom) { continue; }\n        p.zoom = zoom;\n\n        // find all nearby points\n        var tree = this.trees[zoom + 1];\n        var neighborIds = tree.within(p.x, p.y, r);\n\n        var numPointsOrigin = p.numPoints || 1;\n        var numPoints = numPointsOrigin;\n\n        // count the number of points in a potential cluster\n        for (var i$1 = 0, list = neighborIds; i$1 < list.length; i$1 += 1) {\n            var neighborId = list[i$1];\n\n                var b = tree.points[neighborId];\n            // filter out neighbors that are already processed\n            if (b.zoom > zoom) { numPoints += b.numPoints || 1; }\n        }\n\n        // if there were neighbors to merge, and there are enough points to form a cluster\n        if (numPoints > numPointsOrigin && numPoints >= minPoints) {\n            var wx = p.x * numPointsOrigin;\n            var wy = p.y * numPointsOrigin;\n\n            var clusterProperties = reduce && numPointsOrigin > 1 ? this._map(p, true) : null;\n\n            // encode both zoom and point index on which the cluster originated -- offset by total length of features\n            var id = (i << 5) + (zoom + 1) + this.points.length;\n\n            for (var i$2 = 0, list$1 = neighborIds; i$2 < list$1.length; i$2 += 1) {\n                var neighborId$1 = list$1[i$2];\n\n                    var b$1 = tree.points[neighborId$1];\n\n                if (b$1.zoom <= zoom) { continue; }\n                b$1.zoom = zoom; // save the zoom (so it doesn't get processed twice)\n\n                var numPoints2 = b$1.numPoints || 1;\n                wx += b$1.x * numPoints2; // accumulate coordinates for calculating weighted center\n                wy += b$1.y * numPoints2;\n\n                b$1.parentId = id;\n\n                if (reduce) {\n                    if (!clusterProperties) { clusterProperties = this._map(p, true); }\n                    reduce(clusterProperties, this._map(b$1));\n                }\n            }\n\n            p.parentId = id;\n            clusters.push(createCluster(wx / numPoints, wy / numPoints, id, numPoints, clusterProperties));\n\n        } else { // left points as unclustered\n            clusters.push(p);\n\n            if (numPoints > 1) {\n                for (var i$3 = 0, list$2 = neighborIds; i$3 < list$2.length; i$3 += 1) {\n                    var neighborId$2 = list$2[i$3];\n\n                        var b$2 = tree.points[neighborId$2];\n                    if (b$2.zoom <= zoom) { continue; }\n                    b$2.zoom = zoom;\n                    clusters.push(b$2);\n                }\n            }\n        }\n    }\n\n    return clusters;\n};\n\n// get index of the point from which the cluster originated\nSupercluster.prototype._getOriginId = function _getOriginId (clusterId) {\n    return (clusterId - this.points.length) >> 5;\n};\n\n// get zoom of the point from which the cluster originated\nSupercluster.prototype._getOriginZoom = function _getOriginZoom (clusterId) {\n    return (clusterId - this.points.length) % 32;\n};\n\nSupercluster.prototype._map = function _map (point, clone) {\n    if (point.numPoints) {\n        return clone ? extend({}, point.properties) : point.properties;\n    }\n    var original = this.points[point.index].properties;\n    var result = this.options.map(original);\n    return clone && result === original ? extend({}, result) : result;\n};\n\nfunction createCluster(x, y, id, numPoints, properties) {\n    return {\n        x: fround(x), // weighted cluster center; round for consistency with Float32Array index\n        y: fround(y),\n        zoom: Infinity, // the last zoom the cluster was processed at\n        id: id, // encodes index of the first child of the cluster and its zoom level\n        parentId: -1, // parent cluster id\n        numPoints: numPoints,\n        properties: properties\n    };\n}\n\nfunction createPointCluster(p, id) {\n    var ref = p.geometry.coordinates;\n    var x = ref[0];\n    var y = ref[1];\n    return {\n        x: fround(lngX(x)), // projected point coordinates\n        y: fround(latY(y)),\n        zoom: Infinity, // the last zoom the point was processed at\n        index: id, // index of the source feature in the original input array,\n        parentId: -1 // parent cluster id\n    };\n}\n\nfunction getClusterJSON(cluster) {\n    return {\n        type: 'Feature',\n        id: cluster.id,\n        properties: getClusterProperties(cluster),\n        geometry: {\n            type: 'Point',\n            coordinates: [xLng(cluster.x), yLat(cluster.y)]\n        }\n    };\n}\n\nfunction getClusterProperties(cluster) {\n    var count = cluster.numPoints;\n    var abbrev =\n        count >= 10000 ? ((Math.round(count / 1000)) + \"k\") :\n        count >= 1000 ? ((Math.round(count / 100) / 10) + \"k\") : count;\n    return extend(extend({}, cluster.properties), {\n        cluster: true,\n        cluster_id: cluster.id,\n        point_count: count,\n        point_count_abbreviated: abbrev\n    });\n}\n\n// longitude/latitude to spherical mercator in [0..1] range\nfunction lngX(lng) {\n    return lng / 360 + 0.5;\n}\nfunction latY(lat) {\n    var sin = Math.sin(lat * Math.PI / 180);\n    var y = (0.5 - 0.25 * Math.log((1 + sin) / (1 - sin)) / Math.PI);\n    return y < 0 ? 0 : y > 1 ? 1 : y;\n}\n\n// spherical mercator to longitude/latitude\nfunction xLng(x) {\n    return (x - 0.5) * 360;\n}\nfunction yLat(y) {\n    var y2 = (180 - y * 360) * Math.PI / 180;\n    return 360 * Math.atan(Math.exp(y2)) / Math.PI - 90;\n}\n\nfunction extend(dest, src) {\n    for (var id in src) { dest[id] = src[id]; }\n    return dest;\n}\n\nfunction getX(p) {\n    return p.x;\n}\nfunction getY(p) {\n    return p.y;\n}\n\nreturn Supercluster;\n\n}));\n"},"lineCount":638}},"error":null,"hash":"da08fc15a22e1a18bb8c93ecd6be4fcd","cacheData":{"env":{}}}